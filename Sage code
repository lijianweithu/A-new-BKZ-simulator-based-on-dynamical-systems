#The algorithm performs a BKZ simulator based on dynamical systems presented in Alg. 4 of [Jianwei Li and Phong Nguyen. BKZ Revisited: A Complete Analysis. 2020.]
#It compares Chen-Nguyen's heuristic BKZ simulator with Li-Nguyen's heuristic BKZ simulator based on dynamical systems.
#The implementation is correct with Sage 7.0.

import copy

def matrixA(rank,beta):
    A=matrix(QQ,rank);
    w = 1-1/beta;

    for i in range(rank):
        if i < rank-beta:
            A[0,i]=w**i;
        else:
            A[0,i]=w**(rank-beta);
    for j in range(1,beta,1):
        A[j]=A[0];
    for k in range(beta,rank,1):
        for l in range(k-beta+1):
            A[k,l]=0;
        for p in range(k-beta+1,rank-beta,1):
            A[k,p]=w**(p-k+beta-1);
        for q in range(rank-beta,rank,1):
            A[k,q]=w**(rank-k-1);
    A=A/beta
    return A
    
def AHconstant(beta):       #It uses our average values of Hermite invariants of 2000 random HKZ-reduced bases.
    v=[0.000000000000000, 0.000000000000000, -0.00510196377567085, -0.00107666327046254, 0.00721493331037026, 0.0172922379408905, 0.0276993093781221, 0.0382859795952343, 0.0482936766761646, 0.0578479066018888, 0.0670563192422883, 0.0759546553618141, 0.0846666235685110, 0.0931642619685445, 0.101751890904296, 0.110211280460018, 0.118625981719138, 0.127004786199126, 0.135383008495571, 0.143757200453911, 0.152206424810413, 0.160800754179335, 0.169534179980289, 0.178425728374139, 0.187470594890389, 0.196699422286623, 0.206070776730679, 0.215623123978602, 0.225445595769477, 0.235460006114398, 0.245673786121561, 0.256089307622679, 0.266677881224944, 0.277432795118217, 0.288458936247855, 0.299662098010410, 0.311028574491920, 0.322580433523455, 0.334333870090499, 0.346211635100222, 0.358221887890187, 0.370347436279772, 0.382589642859170, 0.394977800976732, 0.407413847184503, 0.419916229563308, 0.432378898312800, 0.444727344751010, 0.456892456678605, 0.468535755828720, 0.478808739222082]                              
    r=vector(RR,beta+1);
    for h in range(0,51,1):
        r[h]=v[h]    
    for i in range(51,beta+1,1):
        ga=log(gamma(i/2+1))      
        r[i] = (2*ga-i*log(pi))/(2*i) 
    return r

def kappa(d):
    if d<50:
        return 0
    else:
        lv=log(gamma(d/2+1))       
        kap = (2*lv-d*log(pi))/(2*d)                    
    return kap.n()

def fixpoint(rank,beta):        #It computes the fixed point. 
    u=vector(ZZ,rank);
    v=vector(RR,rank);
    x=vector(RR,rank);
    r=vector(RR,beta+1);

    r=AHconstant(beta);
    v[rank-beta]=r[beta];
    for i in range(rank-beta+1,rank,1):
        s=sum([r[p+1]/p for p in range(rank-i,beta,1)]);
        v[i]=r[rank-i]-s;
    for j in range(rank-beta-1,-1,-1):
        t=sum([v[q] for q in range(j+1,j+beta,1)]);
        v[j]=(beta*r[beta]+t)/(beta-1);
    for k in range(rank):
        u[k]=1;
    h=sum([v[l] for l in range(rank)]);
    x=v-u*h/rank;
    return x

def DSsimulator(gs,rank,beta,tours):
    x=fixpoint(rank,beta);
    A=matrixA(rank,beta);
    Y=matrix(RR,tours+1,rank); 
    RHF=vector(RR,tours+1);

    RHF[0]= exp(gs[0]/(rank-1));       
    Y[0]=gs-x; #y=gs-x;

    for j in range(1,tours+1):
        Y[j]=Y[j-1]*A;    
        s=x[0]+Y[j,0];
        RHF[j]=exp(s/(rank-1));   
        if RHF[j] > RHF[j-1]:
             RHF[j]=RHF[j-1]
    dspic=line([(i, RHF[i]) for i in range(tours+1)],rgbcolor=(0,0,1),legend_label='Heuristic estimate by Eq. (47)')               
    return dspic 

def simulation(gs,rank,beta,tours):  #Chen-Nguyen's heuristic BKZ simulator, the sage code is from the full version of Chen-Ngyen 11.  
    CNRHF=vector(RR,tours+1);
    CNRHF[0]=exp(gs[0]/(rank-1));   
    beta = min(rank,beta);
    if (beta<50):
        print "Pleasea take a beta >= 50 for simulation"
        return;
    k=[kappa(i) for i in range(1,beta+1)];
    # ---------------------------------------------
    #Normalized L for HKZ-reduced basis in rank 50 from  our experiment; 
    #This L and previous v appearing in ``def AHconstant(beta)'' are produced from the same 2000 random HKZ-reduced bases in rank 50.
    # ---------------------------------------------
    L=[0.478808739222082, 0.489012666773426, 0.471834801482133, 0.446719016169211, 0.421207282759104, 0.399074072657818,0.377002738324176, 0.360461182979398, 0.344526993214412, 0.328876706216176, 0.313870722665017, 0.298310465379931, 0.283672816453106, 0.265417672153045, 0.250166004981956, 0.233962238616137, 0.217743081343158, 0.200995951686958, 0.184316083518051, 0.166067051638084, 0.146121397664364, 0.125872617421730, 0.104768946183253, 0.0833062144579809, 0.0606174594258003, 0.0384541013899879, 0.0148245867975415, -0.0118435949010415, -0.0370547565501113, -0.0630646671072155, -0.0897462134341077, -0.116114923673099, -0.142781300480876, -0.173512854303826, -0.201760858715164, -0.230046512122665, -0.259638619436704, -0.290402283848978, -0.318757966247624, -0.347813007476835, -0.376560632641042, -0.405711373392355, -0.436471702692289, -0.463355094896583, -0.491212315008654, -0.514390252817858, -0.533947141686563, -0.549843978053374, -0.548605375812176, -0.503376186274922]  
    HKZ_len = 50;

    for j in range(1,tours+1):
        gs = vector(gs);
        totalV = sum(gs.list_from_positions(range(beta)))
        prevV = 0
        unchanged = True
        ngs=[]

        for i in range(rank-HKZ_len):
            sv = (totalV - prevV)/min(beta,rank-i+1) + k[min(beta,rank-i+1)-1];
            if unchanged:
                if (gs[i]>sv):
                    ngs.append(sv);
                    unchanged = False;
                else:
                    ngs.append(gs[i])
            else:
                ngs.append(sv)
            if i+beta-1<rank:
                totalV += gs[i+beta-1]
            prevV += ngs[i]
        for i in range(rank-HKZ_len,rank):
            v = (totalV-prevV)/HKZ_len + L[i+HKZ_len-rank];
            ngs.append(v);

        CNRHF[j]=exp(ngs[0]/(rank-1));  
        gs = ngs;

    pic=line([(i, CNRHF[i]) for i in range(tours+1)],rgbcolor=(1,0,0),legend_label='Chen-Nguyen simulator')               
    return pic 

def Integral_GSO(B):     #The individual implementation is correct.
    n = B.nrows()
    m = B.ncols()
    Lamb = matrix(ZZ,n,n)      #record the integral GSO coefficients \lambda_{i,j}'s
    C = matrix(ZZ,n,m)         #record the integral GSO vectors \vec{c}_{i}'s
    d = vector(ZZ,n)           #record the integral potentials d_{i}'s
    for i in range(n):
        C[i] = B[i]
        for j in range(i):
            Lamb[i,j] =  B[i]*C[j]    
            if j==0:
                C[i] = d[j]*C[i] - Lamb[i,j]*C[j]
            else:
                C[i] = (d[j]*C[i] - Lamb[i,j]*C[j])/d[j-1]
        S = C[i]*C[i]
        if i==0:
            d[i] = S
        else:
            d[i] = S/d[i-1]
    return d


def ULGSV(v):    #The individual implementation is correct.
    n = len(v) 
    lgs = vector(RR,n)           
    lgs[0]=(log(v[0])-(log(v[n-1]))/n)/2
    for i in range(1,n,1):
        lgs[i]=(log(v[i])-log(v[i-1])-(log(v[n-1]))/n)/2
    return lgs


#The following is an example:
#It compares Chen-Nguyen's heuristic BKZ simulator with Li-Nguyen's heuristic BKZ simulator based on dynamical systems.

from sage.libs.fplll.fplll import gen_intrel
rank=180;beta=90;tours=60
A=gen_intrel(rank,rank)  #It generates a knapsack-type random lattice.
B = A.LLL()  
dv=Integral_GSO(B)
gsln=ULGSV(dv)
gscn=ULGSV(dv)
    
ln=DSsimulator(gsln,rank,beta,tours);
cn=simulation(gscn,rank,beta,tours);
show(ln+cn, title='Evolution of RHF with the number of tours $N$',axes_labels=['N','RHF'])

#It will output a picture like Fig. 1 in [Jianwei Li and Phong Nguyen. BKZ Revisited: A Complete Analysis. 2020.]
    
       
